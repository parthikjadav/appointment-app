generator client {
  provider = "prisma-client-js"
  output   = "../generate/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  PROFESSIONAL
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(USER)

  profile  Profile?
  services Service[]

  booked       Appointment[] @relation("Booked")
  appointments Appointment[] @relation("Professional")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  title    String
  bio      String?
  services Service[]
  timings  Timing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        String @id @default(cuid())
  userId    String
  profileId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title        String
  description  String
  price        Float
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id             String @id @default(cuid())
  userId         String
  serviceId      String
  professionalId String

  user         User    @relation("Booked", fields: [userId], references: [id], onDelete: Cascade)
  service      Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  professional User    @relation("Professional", fields: [professionalId], references: [id], onDelete: Cascade)

  payment Payment[]

  isPaid          Boolean @default(false)
  isRefunded      Boolean @default(false)
  refundId        String?
  paymentIntentId String?

  status Status   @default(PENDING)
  from   DateTime
  to     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Timing {
  id String @id @default(cuid())

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  day       Int
  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(cuid())

  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  paymentIntentId String

  amount Float
  status PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
